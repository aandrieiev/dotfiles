" NeoBundle
set rtp+=~/.vim/bundle/neobundle.vim
call neobundle#begin(expand('~/.vim/bundle/'))

" Interface
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'bling/vim-airline'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'Yggdroot/indentLine'

" Editing
NeoBundle 'raimondi/delimitmate'
NeoBundle 'junegunn/vim-easy-align'
NeoBundle 'sirver/ultisnips',
NeoBundle 'honza/vim-snippets'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'elixir-lang/vim-elixir'
" NeoBundle 'tpope/vim-surround'
" NeoBundle 'Shougo/neocomplete',

" Integration
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'Shougo/unite.vim'
" NeoBundle 'xolox/vim-easytags'
" NeoBundleLazy 'scrooloose/syntastic'

" Support
NeoBundle 'Shougo/vimproc.vim', {'build':{'mac':'make -f make_mac.mak'}}
" NeoBundle 'xolox/vim-misc'

call     neobundle#end()
filetype plugin indent on
NeoBundleCheck

" Appearence
syntax enable
se cursorline

"" Solarized color scheme
set background=dark
colorscheme solarized
let g:solarized_termtrans=1     " required
let g:solarized_termcolors=256  " required

" Airline
set laststatus=2                                      " to show the airline
set noshowmode                                        " hide vim mode indidicator
let g:airline_extensions=['branch', 'tabline']
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1            " show buffers
let g:airline#extensions#tabline#fnamemod=':t'        " only buff names
let g:airline#extensions#tabline#fnamecollapse=1      " show new buffers on edit


"" Show Vim modes as one letter abbreviations (e.g. NORMAL - N)
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }

"" Hide encoding and format values from the statusline
let g:airline_section_y=''

" Version Control
"" Fugitive
nnoremap <space>gs :Gstatus<CR>

"" Git-gutter
let g:gitgutter_sign_column_always=1


" Editing
augroup OnBiffeWrite
  autocmd bufwritepre * :%s/\s\+$//e     " autoremove trailing whitespaces
  autocmd bufwritepre * :retab           " convert tabs<->spaces
augroup END

set wildignorecase
set nowrap
set number                               " show line numbers
set colorcolumn=81                       " draw a vertical line
set expandtab tabstop=2                  " expand tabs to 2 spaces
set shiftwidth=2

syntax   on
filetype plugin on                       " load ft's plugin if exists
set      dir=/var/tmp,/tmp,.             " alter default dir for swap files

set backspace=2

" Syntax of these languages is fussy over tabs Vs spaces
" autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
" autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Customisations based on house-style (arbitrary)
" autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
" autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
" autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

" Treat .rss files as XML
" autocmd BufNewFile,BufRead *.rss setfiletype xml

set encoding=utf-8 fileencoding=utf-8 termencoding=utf-8       " encoding
set nobackup nowritebackup noswapfile autoread                 " no swap
set clipboard=unnamed,unnamedplus
set nofoldenable

nmap L :bnext<cr>
nmap H :bprevious<cr>
imap jj <esc>

nmap <Leader>e ddkP
nmap <Leader>c ddp

vmap <Leader>e xkP`[V`]
vmap <Leader>c xp`[V`]

"" Easier window navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

set showmatch

"" Close buffer
nmap <leader>d :bp<bar>sp<bar>bn<bar>bd<CR>

"" Decrese delay after <leader>
set timeoutlen=500

"" Nicer non-printed characters
set listchars=tab:⇥\ ,eol:↩

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Neocomplete
" let g:neocomplete#enable_at_startup                 = 1
" let g:neocomplete#enable_smart_case                 = 1
" let g:neocomplete#sources#syntax#min_keyword_length = 4
" let g:neocomplete#sources#dictionary#dictionaries   = { 'default' : '' }
" let g:neocomplete#enable_auto_select                = 1
"
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" EasyAlign
"" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"" Define custom rules
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|->\|>' },
\ '/': {
\     'pattern':         '//\+\|/\*\|\*/',
\     'delimiter_align': 'l',
\     'ignore_groups':   ['!Comment'] },
\ }

" Search
set ignorecase smartcase incsearch

" Unite
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

let  g:unite_source_rec_max_cache_files=5000
let  g:unite_source_rec_async_command='ag --nocolor --nogroup --ignore ".hg"
     \ --ignore ".git" --hidden -g ""'

let  g:unite_source_grep_command='ag'
let  g:unite_source_grep_default_opts= '--line-numbers -i --nocolor
     \ --nogroup --ignore ".git"'

call unite#custom#source('file_rec,file_rec/async','max_candidates', 0)
call unite#custom#source('file_rec,file_rec/async', 'ignore_pattern', 'vendor/\|public/')

call unite#custom#profile('default', 'context', {
\   'winheight': 15,
\   'no-auto-resize': 1,
\   'direction': 'topleft'
\ })

nnoremap <leader>f :<C-u>Unite -start-insert buffer bookmark file_rec/async:!<CR>
nnoremap <leader>t :<C-u>Unite grep:.<CR>

function! s:UniteSettings()
  let b:actually_quit=0
  setlocal updatetime=3
  au InsertEnter <buffer> let b:actually_quit=0
  au InsertLeave <buffer> let b:actually_quit=1
  au CursorHold  <buffer> if exists('b:actually_quit') && b:actually_quit | close | endif
endfunction

au FileType unite call s:UniteSettings()

" Emmet
"" HTML, CSS files only
let g:user_emmet_install_global = 0
autocmd FileType html,css,eruby EmmetInstall


""""""""" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_enable_signs             = 1
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list            = 1
" let g:syntastic_check_on_open            = 1
" let g:syntastic_check_on_wq              = 0
" let g:syntastic_auto_jump                = 1
"let g:syntastic_debug = 1

" let g:syntastic_ruby_checkers            = ['mri']

" let g:syntastic_elixir_checkers = ['elixir']
" let g:syntastic_enable_elixir_checker = 0

" IndentLine
nmap <Leader>il :IndentLinesToggle<CR>
let g:indentLine_char = "┆"
let g:indentLine_enabled = "0"

" Tmux integration
if $TMUX != ''
  fun! TmuxMove(direction)
    " Check if we are currently focusing at an edge window.
    " To achieve that,  move to/from the requested window and
    " see if the window number changed
    let oldw = winnr()
    silent! exe 'wincmd ' . a:direction
    let neww = winnr()
    silent! exe oldw . 'wincmd'
    if oldw == neww
      " The focused window is at an edge, so ask tmux to switch panes
      if a:direction == 'j'
        call system("tmux select-pane -D")
      elseif a:direction == 'k'
        call system("tmux select-pane -U")
      elseif a:direction == 'h'
        call system("tmux select-pane -L")
      elseif a:direction == 'l'
        call system("tmux select-pane -R")
      endif
    else
      exe 'wincmd ' . a:direction
    end
  endfun
endif

" for proper color use within tmux
set t_Co=256

nnoremap <silent> <c-w>j :silent call TmuxMove('j')<cr>
nnoremap <silent> <c-w>k :silent call TmuxMove('k')<cr>
nnoremap <silent> <c-w>h :silent call TmuxMove('h')<cr>
nnoremap <silent> <c-w>l :silent call TmuxMove('l')<cr>

" Misc
"" Reload vimrc
map <f6> :w<bar>:source ~/.vimrc <cr>

"" Auto-correct case-sensitive typos
if has("user_commands")
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

"" Save as sudo
cmap w!! w !sudo tee > /dev/null %

"" Create the directories missing from path when saving a file
function s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

"" Allow creating hidden buffers without saving current changes
set hidden
