""" Install/Load Plugins
call plug#begin('~/.vim/plugged')
    Plug 'romainl/flattened'
    Plug 'bling/vim-airline'
    Plug 'junegunn/vim-easy-align'
    Plug 'sirver/ultisnips' | Plug 'honza/vim-snippets'
    Plug 'raimondi/delimitmate'
    Plug 'mattn/emmet-vim'
    Plug 'tomtom/tcomment_vim'
    Plug 'yggdroot/indentLine'
    Plug 'kien/ctrlp.vim'
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter'
    Plug 'saltstack/salt-vim'
    " Only for workstation installations
    if has('nvim')
      Plug 'tpope/vim-obsession'
      Plug 'benekastah/neomake'
    endif
call plug#end()

""" Vim Settings
"" Appearance
if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1 " true color for nvim TUI
else
  set t_Co=256                      " 256-colors for vim
end

" set background=light
colorscheme flattened_dark
let g:solarized_bold=1


highlight FoldColumn ctermbg=bg
autocmd Colorscheme * highlight FoldColumn guifg=bg guibg=bg ctermbg=bg ctermfg=bg

set fillchars=""                               " hide split separation char

set cursorline
set lazyredraw                                 " redraw only when really need to
set nohlsearch
set listchars=tab:⇥\ ,eol:↩                    " nicer non-printed characters

filetype plugin on                             " load ft's plugin if exists

"" Auto-correct typos
if has("user_commands")
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
  map q: :q
endif

"" Behavior
" Change <leader>
let mapleader="\<Space>"
nnoremap <SPACE> <Nop>

set nobackup nowritebackup noswapfile    " disable swap files

augroup OnBiffeWrite
  autocmd bufwritepre * :%s/\s\+$//e     " autoremove trailing whitespaces
  autocmd bufwritepre * :retab           " convert tabs<->spaces
augroup END

set wildignorecase
set nowrap
set number                               " show line numbers
set colorcolumn=80                       " draw a vertical line
set expandtab tabstop=2                  " expand tabs to 2 spaces
set shiftwidth=2
set backspace=2
set hidden                               " create buffers without saving changes

set clipboard=unnamed,unnamedplus        " share system clipboard
set nofoldenable
" set timeoutlen=500
set ttimeout ttimeoutlen=0

" Buffer navigation
nmap L :bnext<cr>
nmap H :bprevious<cr>
imap jj <esc>

" Close buffer, save file, quit
nmap <leader>d :bp<bar>sp<bar>bn<bar>bd<CR>
nmap <leader>w :w<CR>
nmap <leader>q :q!<CR>
nmap <leader>a :wq<CR>

" Compile & run
map <leader>r :call CompileRun()<CR>
func! CompileRun()
  exec "w"
  if &filetype == 'c'
    exec "!gcc % -o %<"
    exec "!time ./%<"
  elseif &filetype == 'cpp'
    exec "!g++ % -o %<"
    exec "!time ./%<"
  elseif &filetype == 'java'
    exec "!javac %"
    exec "!java -cp %:p:h %:t:r"
  elseif &filetype == 'sh'
    exec "!time bash %"
  elseif &filetype == 'python'
    exec "!time python2.7 %"
  elseif &filetype == 'html'
    exec "!firefox % &"
  elseif &filetype == 'go'
    exec "!go build %<"
    exec "!go run %"
  elseif &filetype == 'mkd'
    exec "!~/.vim/markdown.pl % > %.html &"
    exec "!firefox %.html &"
  elseif &filetype == 'cs'
    exec "!mcs % && mono %:r.exe"
  endif
endfunc

" Create the directories missing from path when saving a file
if !exists("*MkNonExDir")
  function MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
      let dir=fnamemodify(a:file, ':h')
      if !isdirectory(dir)
        call mkdir(dir, 'p')
      endif
    endif
  endfunction
endif

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Easier window navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

set showmatch            " highlights matching braces
set errorformat=%A%f:%l:%v
" Filetype-specific
" NOTE: for more advanced setup, use ~/.vim/ftplygin/filetype.vim
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2

autocmd BufRead,BufNewFile .pentadactylrc  setfiletype vim
autocmd BufRead,BufNewFile *.template  setfiletype json

autocmd! BufWritePost *.py silent Neomake
autocmd! BufWritePost *.template,*.json silent Neomake
autocmd! BufWritePost *.go silent Neomake


" Move line up/down
nmap <Leader>e ddkP
nmap <Leader>c ddp

" Move vertically by visual line
nnoremap j gj
nnoremap k gk

" Nicer non-printed characters
set listchars=tab:⇥\ ,eol:↩

" Search
set ignorecase smartcase

" Splits
set splitright
set splitbelow

" Terminal buffer navigation (NVIM-only, experimental)
if has('nvim')
  tnoremap jj <C-\><C-n>
  tnoremap <Esc> <C-\><C-n>
  tnoremap H <C-\><C-n>:bprevious<CR>
  tnoremap L <C-\><C-n>:bnext<CR>

  tnoremap <A-h> <C-\><C-n><C-w>h
  tnoremap <A-j> <C-\><C-n><C-w>j
  tnoremap <A-k> <C-\><C-n><C-w>k
  tnoremap <A-l> <C-\><C-n><C-w>l

  nnoremap <A-h> <C-w>h
  nnoremap <A-j> <C-w>j
  nnoremap <A-k> <C-w>k
  nnoremap <A-l> <C-w>l

  nnoremap <leader>y :vs term://bash<cr>
  nnoremap <leader>t :10sp term://bash<cr>

  autocmd BufWinEnter,WinEnter,BufEnter term://* startinsert
  autocmd TermClose * call feedkeys(' ')
end

" Tmux integration
if $TMUX != ''
  fun! TmuxMove(direction)
    " Check if we are currently focusing at an edge window.
    " To achieve that,  move to/from the requested window and
    " see if the window number changed
    let oldw = winnr()
    silent! exe 'wincmd ' . a:direction
    let neww = winnr()
    silent! exe oldw . 'wincmd'
    if oldw == neww
      " The focused window is at an edge, so ask tmux to switch panes
      if a:direction == 'j'
        call system("tmux select-pane -D")
      elseif a:direction == 'k'
        call system("tmux select-pane -U")
      elseif a:direction == 'h'
        call system("tmux select-pane -L")
      elseif a:direction == 'l'
        call system("tmux select-pane -R")
      endif
    else
      exe 'wincmd ' . a:direction
    end
  endfun

  nnoremap <silent> <c-w>j :silent call TmuxMove('j')<cr>
  nnoremap <silent> <c-w>k :silent call TmuxMove('k')<cr>
  nnoremap <silent> <c-w>h :silent call TmuxMove('h')<cr>
  nnoremap <silent> <c-w>l :silent call TmuxMove('l')<cr>
endif

" Reload vimrc
map <f6> :w<bar>:source ~/.vimrc<cr>:AirlineRefresh<cr>:echo "config reloaded!"<cr>

" Save as sudo
cmap w!! w !sudo tee > /dev/null %

" Spell checking
autocmd FileType markdown setlocal spell spelllang=en_us

" Undo file
if has('persistent_undo')
    let vimDir = '$HOME/.vim'
    let &runtimepath.=','.vimDir


    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" Set parameters not defaulted in Vim, but defaulted in NeoVim
if has('vim')
  set nocompatible
  set t_Co=256 " failover for remote machines
  set encoding=utf-8 fileencoding=utf-8 termencoding=utf-8       " encoding

  set autoread
  set incsearch
  set laststatus=2                                      " to show the airline
  set wildmenu
endif

""" Plugin Settings
"" Airline
set noshowmode                                        " hide vim mode indidicator
let g:airline_extensions=['branch', 'tabline']
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1            " show buffers
let g:airline#extensions#tabline#fnamemod=':t'        " only buff names
let g:airline#extensions#tabline#fnamecollapse=1      " show new buffers on edit

" colortheme
let g:airline_theme='solarized'

" remove separators
let g:airline_left_sep=''
let g:airline_right_sep=''

" Show Vim modes as one letter abbreviations (e.g. NORMAL - N)
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S'
\ }

let g:airline_left_alt_sep = '|'

"" CtrlP
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup

  " Use ag in CtrlP for listing files. Lightning fast and
  " respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden --ignore ".git" -g ""'
endif

nnoremap <leader>f :CtrlP<CR>
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

"" Cursor shape
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

"" EasyAlign
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Define custom rules
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|->\|>' },
\ '/': {
\     'pattern':         '//\+\|/\*\|\*/',
\     'delimiter_align': 'l',
\     'ignore_groups':   ['!Comment'] },
\ }

"" Disable mouse
set mouse=

"" Emmet, HTML, CSS files only
let g:user_emmet_install_global = 0
autocmd FileType html,css,eruby EmmetInstall

"" Fugitive
nnoremap <space>gs :Gstatus<CR>

"" Git-gutter
let g:gitgutter_sign_column_always=1
" hi clear SignColumn
" hi GitGutterAdd ctermbg=bg
" hi GitGutterChange ctermbg=bg
" hi GitGutterDelete ctermbg=bg
" hi GitGutterChangeDelete ctermbg=bg

"" IndentLine
nmap <Leader>il :IndentLinesToggle<CR>
let g:indentLine_char = "|"
let g:indentLine_enabled = 0

"" Neomake
let g:neomake_verbose=2
let g:neomake_go_enabled_makers = ['go']
let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_json_enabled_makers = ['jsonlint']

"" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
