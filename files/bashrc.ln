# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# source extras
for f in ~/.bash/*; do . $f; done

# enable vi mode
# set -o vi

# don't put duplicate lines in the history
export HISTCONTROL=ignoreboth:erasedups

# set default editor
export EDITOR=vim

# set history length
HISTFILESIZE=1000000
HISTSIZE=1000000

# append to the history file, don't overwrite it!
shopt -s histappend

# don't append exits to history
export HISTIGNORE="&:[ ]*:exit"

# check the window size after each command and, if necessary, update
# the values of LINES and COLUMNS (useful for the given implementation
# of PS1 below ;)
shopt -s checkwinsize

# correct minor errors in the spelling of a directory component in a cd command
shopt -s cdspell

# save all lines of a multiple-line command in the same history entry (allows easy re-editing of multi-line commands)
shopt -s cmdhist

# arrow up/down arrays for history search
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# complete path on TAB
bind '"\C-i" menu-complete'
bind 'set completion-ignore-case on'

# setup color variables
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  color_is_on=true
  color_red="\[$(/usr/bin/tput setaf 1)\]"
  color_green="\[$(/usr/bin/tput setaf 2)\]"
  color_yellow="\[$(/usr/bin/tput setaf 3)\]"
  color_blue="\[$(/usr/bin/tput setaf 6)\]"
  color_white="\[$(/usr/bin/tput setaf 7)\]"
  color_gray="\[$(/usr/bin/tput setaf 8)\]"
  color_off="\[$(/usr/bin/tput sgr0)\]"

  color_error="$(/usr/bin/tput setab 1)$(/usr/bin/tput setaf 7)"
  color_error_off="$(/usr/bin/tput sgr0)"

  # set user color
  case `id -u` in
    0) color_user=$color_red ;;
    *) color_user=$color_green ;;
  esac
fi

# append commands to history from all terminals in
# parallel
# function enable_parallel_history {
#   history -a; history -c; history -r;
# }
# enable_parallel_history

# set prompt command (title update and color prompt & git branch status)
function set_prompt_command {
  local PWDNAME=$PWD

  if [[ "${HOME}" == "${PWD}" ]]; then
    PWDNAME="~"
  elif [[ "${HOME}" == "${PWD:0:${#HOME}}" ]]; then
    PWDNAME="~${PWD:${#HOME}}"
  fi

  export GIT_PS1_SHOWDIRTYSTATE=1
  export GIT_PS1_SHOWSTASHSTATE=1
  export GIT_PS1_SHOWUNTRACKEDFILES=1
  export GIT_PS1_SHOWUPSTREAM="auto"
  # < - behind of upstream
  # > - ahead of upstream
  # = - no diff w/ upstream
  # $ - stashed changes
  # % - untracked changes

  # remove parentheses from the git prompt
  local __GIT_PS1_WITHOUT_PARENTHESES=$(echo $(__git_ps1) | tr -d '()=')

  if [ -z "$__GIT_PS1_WITHOUT_PARENTHESES" ]; then
    local __GIT_PS1=$(__git_ps1)
  else
    local __GIT_PS1=" $__GIT_PS1_WITHOUT_PARENTHESES"
  fi

  if [ -n "$SSH_CLIENT" ]; then
    SSH_PROMPT="${color_user}${USER}@${color_yellow}${HOSTNAME}:"
  else
    SSH_PROMPT=""
  fi

  PS1="λ  ${SSH_PROMPT}${color_white}${PWDNAME} ${color_yellow}${__GIT_PS1}${color_off}\n↳  "
}

PROMPT_COMMAND=set_prompt_command

# grep colorize
export GREP_OPTIONS="--color=auto"

# aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ll='ls -alFGh'
alias p='ping ipecho.net'
alias prog='ps ax | grep -i'
alias dh='df -h'
alias rf='rm -rf'

alias gits='git status'
alias gita='git add'
alias gitph='git push'
alias gitpl='git pull'
alias git-svn='git svn'
alias gitcim='git ci -m'
alias gita='git add'
alias gitap='git add -p'

alias sres='git reset --soft'
alias pub_ip='curl ipecho.net/plain;echo'
alias mig='rake db:migrate && rake db:migrate RAILS_ENV=test'

alias tmux='tmux -2'
